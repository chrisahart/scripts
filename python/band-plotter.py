#!/usr/bin/env python3
"""
 Plot a band structure diagram from CSV point sets. See `cp2k-band2csv.py`
 for how to generate the CSVs from CP2K output.

 This script was written by Joseph Wilson under PHYS493, 2019.
 It is free to use and modify.

"""

import argparse
from glob import glob
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages


def get_plottable_data(pointsets, labelled_kpoints={}):
    """
    Convert the CSV data from point sets generated by `cp2k-band2csv.py`
    into an easy-to-plot form, complete with special k-point x-labels.

    Returns
    """

    xlabels = {}
    xcoord = 0
    xcoords = []
    data = []
    for pointset in pointsets:
        for kcoord, bandvals in zip(pointset[:, :3], pointset[:, 3:]):

            # find kcoord label
            for labelled_kcoord, label in labelled_kpoints.items():
                # see if kcoord is equal to a labelled kcoord to within floating point precision
                if np.allclose(kcoord, labelled_kcoord):
                    # kcoord is labelled
                    if xcoord in xlabels and xlabels[xcoord] != label:
                        xlabels[xcoord] += '|' + label
                    else:
                        xlabels[xcoord] = label
                    break

            xcoords.append(xcoord)
            data.append(bandvals)

            xcoord += 1
        xcoord -= 1  # have no horizontal gap between point sets

    bands = np.array(data).T
    return bands, xcoords, xlabels


def find_bandgaps(bands):
    """
    Finds the (finite) ranges of energy which contain no bands.
   Uses the fact that the bands are ordered so that their
    successive minima and maxima are non-decreasing.
    """
    gaps = []
    upper = np.inf
    for band in bands:
        lower = band.min()
        if upper < lower:
            gaps.append((upper, lower))
        upper = band.max()
    return gaps


def save_as_pdf(filename):
    """
    Export the figure as it appears to a PDF.
    """
    if not filename.lower().endswith('.pdf'):
        filename += '.pdf'
    pdf = PdfPages(filename)
    pdf.savefig(fig)
    pdf.close()
    print(f"saved figure to {filename!r}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('bandfilename', metavar='bandstructure-file', type=str,
                        help="the band structure file generated by CP2K. "
                             "This file isn't read, but used as the basename "
                             "to find associated csv files.")
    args = parser.parse_args()

    # load pointsets
    pointset_pattern = f'{args.bandfilename}.set-*.csv'
    pointsets = [np.loadtxt(f) for f in sorted(glob(pointset_pattern))]
    if not pointsets:
        raise parser.error(f"no point sets found: {pointset_pattern}")

    # load kpath file, if it exists
    try:
        kpath_filename = f'{args.bandfilename}.kpath.csv'
        kpath = np.loadtxt(kpath_filename,
                           dtype=[('label', '<U20'), ('a', float), ('b', float), ('c', float)])
        labelled_kpoints = {tuple(kpoint): label for label, *kpoint in kpath}
    except OSError:
        print(f"kpath file {kpath_filename!r} not found. Plot will have no x-labels")
        labelled_kpoints = {}

        # convert data
    bands, xcoords, xlabels = get_plottable_data(pointsets, labelled_kpoints)
    bandgaps = find_bandgaps(bands)

    if bandgaps:
        # set zero level to the bottom of the highest band gap
        highest_bandgap = bandgaps[-1]
        print(f"highest bandgap: {highest_bandgap[1] - highest_bandgap[0]:5g} eV")
        yoffset = -highest_bandgap[0]
    else:
        print(f"no bandgaps found")
        yoffset = 0

    # create figure window and axes

    fig, ax = plt.subplots()

    # show k-path along x axis
    sortedxticks = sorted(xlabels.keys())
    ax.set_xticks(sortedxticks)
    ax.set_xticklabels([xlabels[x] for x in sortedxticks])
    for x in sortedxticks:
        ax.axvline(x, c='k', lw=0.5)

    # plot each band
    for i, band in enumerate(bands):
        ax.plot(xcoords, band + yoffset, c=plt.cm.rainbow(i / len(bands)))

    # shade in the bandgap region
    for lower, upper in bandgaps:
        ax.axhspan(lower + yoffset, upper + yoffset, alpha=0.2)

    ax.set_title(args.bandfilename)
    ax.set_ylabel("$E_n(k)$ [eV]")
    ax.set_xlabel("$k$")

    ax.autoscale(tight=True, axis='x')
    plt.tight_layout()
    plt.savefig('band_structure.png', dpi=600)
    plt.show()
